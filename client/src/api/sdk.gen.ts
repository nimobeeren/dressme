// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetUsersData, GetUsersResponse, GetAvatarImageData, GetAvatarImageResponse, GetAvatarImageError, GetWearablesData, GetWearablesResponse, CreateWearablesData, CreateWearablesResponse, CreateWearablesError, GetWearableImageData, GetWearableImageResponse, GetWearableImageError, GetOutfitImageData, GetOutfitImageResponse, GetOutfitImageError, DeleteOutfitData, DeleteOutfitError, GetOutfitsData, GetOutfitsResponse, CreateOutfitData, CreateOutfitError } from './types.gen';

export const client = createClient(createConfig({
    throwOnError: true
}));

/**
 * Get Users
 */
export const getUsers = <ThrowOnError extends boolean = true>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersResponse, unknown, ThrowOnError>({
        ...options,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users'
    });
};

/**
 * Get Avatar Image
 */
export const getAvatarImage = <ThrowOnError extends boolean = true>(options: Options<GetAvatarImageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAvatarImageResponse, GetAvatarImageError, ThrowOnError>({
        ...options,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/images/avatars/{avatar_image_id}'
    });
};

/**
 * Get Wearables
 */
export const getWearables = <ThrowOnError extends boolean = true>(options?: Options<GetWearablesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWearablesResponse, unknown, ThrowOnError>({
        ...options,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/wearables'
    });
};

/**
 * Create Wearables
 * Create one or more wearables.
 *
 * Multiple wearables can be created in one request by passing fields multiple times with the same
 * name. All fields must appear the same number of times. The description can be set to an empty
 * string if you want to omit it.
 */
export const createWearables = <ThrowOnError extends boolean = true>(options: Options<CreateWearablesData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateWearablesResponse, CreateWearablesError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/wearables'
    });
};

/**
 * Get Wearable Image
 */
export const getWearableImage = <ThrowOnError extends boolean = true>(options: Options<GetWearableImageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWearableImageResponse, GetWearableImageError, ThrowOnError>({
        ...options,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/images/wearables/{wearable_image_id}'
    });
};

/**
 * Get Outfit Image
 */
export const getOutfitImage = <ThrowOnError extends boolean = true>(options: Options<GetOutfitImageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutfitImageResponse, GetOutfitImageError, ThrowOnError>({
        ...options,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/images/outfit'
    });
};

/**
 * Delete Outfit
 */
export const deleteOutfit = <ThrowOnError extends boolean = true>(options: Options<DeleteOutfitData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteOutfitError, ThrowOnError>({
        ...options,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/outfits'
    });
};

/**
 * Get Outfits
 */
export const getOutfits = <ThrowOnError extends boolean = true>(options?: Options<GetOutfitsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOutfitsResponse, unknown, ThrowOnError>({
        ...options,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/outfits'
    });
};

/**
 * Create Outfit
 */
export const createOutfit = <ThrowOnError extends boolean = true>(options: Options<CreateOutfitData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, CreateOutfitError, ThrowOnError>({
        ...options,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/outfits'
    });
};